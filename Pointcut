Imagine code Execution and understand every event as point, thus define point cut

Talk of expressions

Talk about Point cut desginators

execution, within, args, 

Talk about how these expressions uniquely identify a property of event of a code block and they can be combined together to narrow down the search

execution(* codes.shandilya.service.*.*(..))

execution(* codes.shandilya.service.*.*(..)) && args(isFoodOrderPlaced,..)

How arg is mapped ?

Spring AOP relies on argument position and argument type to determine which argument in the pointcut expression corresponds to which parameter in the target method. Here's how it works:

Matching by Position: When your pointcut expression defines argument types (e.g., boolean, boolean), Spring AOP attempts to match them to the target method's parameters based on their order in the method signature.
Type Compatibility: In addition to position, argument types must be compatible. In your example, the pointcut specifies boolean, boolean, so the first two arguments of the target method must both be of type boolean.
Let's break down your scenario:

Pointcut expression: execution(* codes.shandilya.service.*.*(boolean, boolean, ..))
Target method: public void cookFood(boolean isFoodOrderPlaced, boolean isUrgent)
In this case:

The first argument in the pointcut (boolean) matches the first parameter of the target method (isFoodOrderPlaced) because they are both at the same position (first) and both are of type boolean.
Similarly, the second argument in the pointcut (boolean) matches the second parameter of the target method (isUrgent) for the same reasons.

What are join points and what purpose they serve
Location: It pinpoints a particular event in the program's flow -- Giving you handle of some sort so that using this you could fetch information on the current execution step
Information Provider : Details regarding method signature, args, etc

Proceeding joint point 

A ProceedingJoinPoint is a specific type of JoinPoint in Spring AOP that goes beyond providing information about the intercepted point. It offers the additional capability to control the execution of the target method.


